{"version":3,"sources":["services/imageAPI.js","Components/Searchbar/Searchbar.js","Components/ImageGalleryItem/ImageGalleryItem.js","Components/ImageGallery/ImageGallery.js","Components/Button/Button.js","Components/Modal/Modal.js","App.js","index.js"],"names":["getImages","searchQuery","page","axios","get","then","res","data","hits","Searchbar","state","handleInputValue","evt","value","currentTarget","setState","toLowerCase","handleSubmit","preventDefault","trim","props","onSubmit","resetForm","className","this","type","autoComplete","autoFocus","placeholder","onChange","React","Component","ImageGalleryItem","imageUrl","tags","largeImageURL","openModal","src","alt","onClick","ImageGallery","images","map","id","webformatURL","Button","Modal","handleKeyDown","code","onClose","handleBackdropClick","target","window","addEventListener","removeEventListener","children","App","showModal","largeImage","status","error","handleFormSubmit","fetchImages","options","toast","info","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","prevState","catch","toggleModal","prevProps","scrollTo","top","document","documentElement","scrollHeight","behavior","color","loading","size","length","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.54e8161e.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst getImages = ({ searchQuery, page = 1 }) => {\n    return axios\n        .get(\n            `https://pixabay.com/api/?key=21947643-3ad5511e98ce1ab16d6eede2a&q=${searchQuery}&image_type=photo&page=${page}&per_page=12&orientation=horizontal`,\n        )\n        .then(res => res.data.hits);\n};\n\nexport default getImages;\n","import React from 'react';\n\nexport class Searchbar extends React.Component {\n    state = {\n        searchQuery: '',\n    };\n\n    handleInputValue = evt => {\n        const { value } = evt.currentTarget;\n        this.setState({\n            searchQuery: value.toLowerCase(),\n        });\n    };\n\n    handleSubmit = evt => {\n        evt.preventDefault();\n\n        if (this.state.searchQuery.trim() === '') {\n            return;\n        }\n        this.props.onSubmit(this.state.searchQuery);\n        this.resetForm();\n    };\n\n    resetForm = () => {\n        this.setState({\n            searchQuery: '',\n        });\n    };\n\n    render() {\n        return (\n            <header className=\"Searchbar\">\n                <form className=\"SearchForm\" onSubmit={this.handleSubmit}>\n                    <button type=\"submit\" className=\"SearchForm-button\">\n                        <span className=\"SearchForm-button-label\">Search</span>\n                    </button>\n\n                    <input\n                        className=\"SearchForm-input\"\n                        type=\"text\"\n                        autoComplete=\"off\"\n                        autoFocus\n                        placeholder=\"Search images and photos\"\n                        value={this.state.searchQuery}\n                        onChange={this.handleInputValue}\n                    />\n                </form>\n            </header>\n        );\n    }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const ImageGalleryItem = ({\n    imageUrl,\n    tags,\n    largeImageURL,\n    openModal,\n}) => {\n    return (\n        <li>\n            <img\n                src={imageUrl}\n                alt={tags}\n                onClick={() => openModal(largeImageURL)}\n            />\n        </li>\n    );\n};\n\nImageGalleryItem.propTypes = {\n    imageUrl: PropTypes.string.isRequired,\n    tags: PropTypes.string.isRequired,\n    openModal: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { ImageGalleryItem } from '../ImageGalleryItem/ImageGalleryItem';\n\nexport const ImageGallery = ({ images, openModal }) => {\n    return (\n        <ul className=\"ImageGallery\">\n            {images.map(({ id, webformatURL, largeImageURL, tags }) => (\n                <ImageGalleryItem\n                    key={id}\n                    imageUrl={webformatURL}\n                    tags={tags}\n                    largeImageURL={largeImageURL}\n                    openModal={openModal}\n                />\n            ))}\n        </ul>\n    );\n};\n\nImageGallery.propTypes = {\n    images: PropTypes.arrayOf(PropTypes.object).isRequired,\n    openModal: PropTypes.func.isRequired,\n};\n\n// export class ImageGallery extends React.Component {\n//     state = {\n//         images: [],\n//         error: null,\n//         status: 'idle',\n//     };\n//     componentDidUpdate(prevProps, prevState) {\n//         const prevQuery = prevProps.searchQuery;\n//         const nextQuery = this.props.searchQuery;\n\n//         if (prevQuery !== nextQuery) {\n//             console.log('Изменился запрос');\n\n//             this.setState({ status: 'pending' });\n//             setTimeout(() => {\n//                 axios\n//                     .get(\n//                         `https://pixabay.com/api/?key=21947643-3ad5511e98ce1ab16d6eede2a&q=${nextQuery}&image_type=photo&page=1&per_page=12&orientation=horizontal`,\n//                     )\n//                     .then(res => {\n//                         console.log(res.data);\n//                         console.log(res.data.hits);\n\n//                         return this.setState({\n//                             images: res.data.hits,\n//                             status: 'resolved',\n//                         });\n//                     })\n// .catch(error =>\n//     this.setState({ error, status: 'rejected' }),\n//                     );\n//             }, 1500);\n//         }\n//     }\n\n//     render() {\n//         const { images, error, status } = this.state;\n\n//         if (status === 'idle') {\n//             return <div>Введи запрос</div>;\n//         }\n\n//         if (status === 'pending') {\n//             return <div>Загружаем...</div>;\n//         }\n\n//         if (status === 'rejected') {\n//             return <p>{error.message}</p>;\n//         }\n\n//         if (status === 'resolved') {\n//             return (\n//                 <ul className=\"ImageGallery\">\n//                     {images.map(({ id, webformatURL, tags }) => (\n//                         <ImageGalleryItem\n//                             key={id}\n//                             imageUrl={webformatURL}\n//                             tags={tags}\n//                         />\n//                     ))}\n//                 </ul>\n//             );\n//         }\n//     }\n// }\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const Button = ({ onClick }) => {\n    return (\n        <button type=\"button\" onClick={onClick}>\n            Load more\n        </button>\n    );\n};\n\nButton.propTypes = {\n    onClick: PropTypes.func.isRequired,\n};\n","import React from 'react';\n\nexport class Modal extends React.Component {\n    componentDidMount() {\n        window.addEventListener('keydown', this.handleKeyDown);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('keydown', this.handleKeyDown);\n    }\n\n    handleKeyDown = evt => {\n        if (evt.code === 'Escape') {\n            this.props.onClose();\n        }\n    };\n\n    handleBackdropClick = evt => {\n        if (evt.currentTarget === evt.target) {\n            this.props.onClose();\n        }\n    };\n\n    render() {\n        return (\n            <div className=\"Overlay\" onClick={this.handleBackdropClick}>\n                <div className=\"Modal\">{this.props.children}</div>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport BounceLoader from 'react-spinners/BounceLoader';\nimport { ToastContainer, toast } from 'react-toastify';\n\nimport getImages from './services/imageAPI';\n\nimport { Searchbar } from './Components/Searchbar/Searchbar';\nimport { ImageGallery } from './Components/ImageGallery/ImageGallery';\nimport { Button } from './Components/Button/Button';\nimport { Modal } from './Components/Modal/Modal';\n\nclass App extends React.Component {\n    state = {\n        page: 1,\n        images: [],\n        searchQuery: '',\n        showModal: false,\n        largeImage: '',\n        status: 'idle',\n        error: null,\n    };\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevState.searchQuery !== this.state.searchQuery) {\n            this.fetchImages();\n        }\n\n        if (prevState.page !== this.state.page) {\n            window.scrollTo({\n                top: document.documentElement.scrollHeight,\n                behavior: 'smooth',\n            });\n        }\n    }\n\n    handleFormSubmit = searchQuery => {\n        this.setState({\n            searchQuery: searchQuery.trim(),\n            page: 1,\n            images: [],\n            status: 'idle',\n            error: null,\n        });\n    };\n\n    fetchImages = () => {\n        const { page, searchQuery } = this.state;\n        const options = { searchQuery, page };\n\n        this.setState({ status: 'pending' });\n\n        toast.info('Looking for pictures ', {\n            position: 'bottom-right',\n            autoClose: 5000,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined,\n        });\n\n        getImages(options)\n            .then(hits =>\n                this.setState(prevState => ({\n                    page: prevState.page + 1,\n                    images: [...prevState.images, ...hits],\n                    status: 'resolved',\n                })),\n            )\n            .catch(error => {\n                this.setState({ error, status: 'rejected' });\n\n                toast.error('Error!', {\n                    position: 'bottom-right',\n                    autoClose: 5000,\n                    hideProgressBar: false,\n                    closeOnClick: true,\n                    pauseOnHover: true,\n                    draggable: true,\n                    progress: undefined,\n                });\n            });\n    };\n\n    openModal = largeImageURL => {\n        this.setState({\n            showModal: true,\n            largeImage: largeImageURL,\n        });\n    };\n\n    toggleModal = () => {\n        this.setState({\n            largeImage: '',\n            showModal: false,\n        });\n    };\n\n    render() {\n        const { images, showModal, largeImage, status } = this.state;\n\n        return (\n            <div>\n                <Searchbar onSubmit={this.handleFormSubmit} />\n                <>\n                    {status === 'pending' && (\n                        <BounceLoader\n                            color={'#1F6FCD'}\n                            loading={true}\n                            size={150}\n                        />\n                    )}\n                    {status === 'resolved' && (\n                        <>\n                            <ImageGallery\n                                images={images}\n                                openModal={this.openModal}\n                            />\n\n                            {images.length > 0 && (\n                                <Button onClick={this.fetchImages} />\n                            )}\n                        </>\n                    )}\n                </>\n\n                {showModal && (\n                    <Modal onClose={this.toggleModal}>\n                        <img src={largeImage} alt=\"\" />\n                    </Modal>\n                )}\n                <ToastContainer />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}